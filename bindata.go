// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/notes.txt
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataNotesTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x41\x8f\xda\x30\x10\x85\xcf\xf5\xaf\x18\x85\x6b\x1d\x8b\xa0\x4a\x6d\x0e\xa8\xa1\x44\xd0\xaa\x52\x11\x89\xd4\x23\x32\xf1\x40\xbc\x22\x9e\xc8\x76\x96\x65\x11\xff\x7d\xe5\x0d\x8b\x58\xa4\x3d\x2d\x73\x8a\xe6\xbd\xf9\xde\x8b\x07\x83\xc1\x44\xea\xad\x34\xbc\x40\xfb\xa8\x2b\x74\x8c\xfd\x22\x8b\x90\x2d\x7e\x3b\xd8\x90\x05\x5f\x23\xf4\x16\x28\x1a\x69\x3d\x4c\xe8\x09\x14\xb6\x3b\x3a\xa0\x02\x32\x90\xfd\x2f\x62\x36\xd3\x7e\xde\xad\x61\x89\x2d\x39\xed\xc9\x1e\x52\xa8\xbd\x6f\x5d\x2a\xc4\x56\xfb\xba\x5b\xc7\x15\x35\x42\xba\x1a\xf7\x46\x5a\xa9\x8d\x58\xf7\xb1\xae\x8f\x65\x8c\x43\xa6\x14\x2a\xc8\xaa\x8a\x3a\xe3\x1d\x2c\xd1\x51\x67\xab\x73\x15\xce\xc7\x63\xf6\x85\x01\x00\xcc\xcb\x72\x01\xb3\xbc\x04\x21\xcf\xde\xd7\x75\x98\x90\x99\x0a\x81\x55\xc2\x47\xfc\xfb\x88\xff\x48\xf8\xb7\x61\x88\x6e\x3b\x8f\x7c\x18\xcb\x46\x3e\x93\x91\x7b\xd7\xd7\x79\x3b\xff\x88\x2b\x8e\x5a\x9d\x3e\x09\x17\xc3\x6b\xfc\xe2\x5f\x71\x6f\x7e\x72\x01\x1c\x2f\x5f\x61\x22\xad\xa2\x14\xa2\x24\xfa\xfa\x7e\xbd\xd1\xd6\xf9\x95\x91\x0d\x06\xf9\x0f\xd5\xe6\xd6\xb1\x93\x57\x86\x29\xe1\xad\x8e\x8d\xd4\xbb\x95\x54\xca\xa2\x73\xc1\xf3\x40\xb5\x89\x15\xe1\xcf\x6d\x50\x42\xbd\xe8\x72\x71\xba\xfe\xfd\x69\xfe\x37\x2f\xf3\xbb\x3f\x00\x7b\x09\x00\x00\xff\xff\x5b\x5f\x19\xb0\xc7\x02\x00\x00")

func dataNotesTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataNotesTxt,
		"data/notes.txt",
	)
}

func dataNotesTxt() (*asset, error) {
	bytes, err := dataNotesTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/notes.txt", size: 711, mode: os.FileMode(420), modTime: time.Unix(1554694389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/notes.txt": dataNotesTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"notes.txt": &bintree{dataNotesTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
